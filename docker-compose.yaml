services:
  kafka:
    image: apache/kafka:4.0.1
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 10s
      retries: 10
    environment:
      - PATH=/opt/kafka/bin:$PATH
      # KRaft settings
      - KAFKA_NODE_ID=0
      - KAFKA_PROCESS_ROLES=controller,broker
      - KAFKA_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:29092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  generator:
    build:
      context: ./generator
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_TOPIC: "raw-events"
    volumes:
      - ./generator:/app
    command: [ "python", "-m", "analytics_generator.generator" ]

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  pinot-zookeeper:
    image: zookeeper:latest
    container_name: pinot-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  pinot-controller:
    image: apachepinot/pinot:1.4.0-21-ms-openjdk
    command: "StartController -zkAddress pinot-zookeeper:2181"
    container_name: pinot-controller
    hostname: pinot-controller
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc:gc-pinot-controller.log"
    depends_on:
      - pinot-zookeeper
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9000/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - ./pinot/config:/config
      - ./pinot/data:/data

  pinot-broker:
    image: apachepinot/pinot:1.4.0-21-ms-openjdk
    command: "StartBroker -zkAddress pinot-zookeeper:2181"
    restart: unless-stopped
    container_name: "pinot-broker"
    ports:
      - "8099:8099"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc:gc-pinot-broker.log"
    depends_on:
      pinot-controller:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8099/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  pinot-server:
    image: apachepinot/pinot:1.4.0-21-ms-openjdk
    command: "StartServer -zkAddress pinot-zookeeper:2181"
    restart: unless-stopped
    container_name: "pinot-server"
    ports:
      - "8097:8097"
      - "8098:8098"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx16G -XX:+UseG1GC -XX:MaxGCPauseMillis=200  -Xlog:gc:gc-pinot-server.log"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8097/health/readiness || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      pinot-controller:
        condition: service_healthy

  pinot-init:
    image: curlimages/curl:latest
    depends_on:
      pinot-controller:
        condition: service_healthy
      pinot-broker:
        condition: service_healthy
      pinot-server:
        condition: service_healthy
    volumes:
      - ./pinot/config:/config
      - ./pinot/init-pinot.sh:/init-pinot.sh
    command: ["sh", "/init-pinot.sh"]
    restart: on-failure

  jobmanager:
    hostname: jobmanager
    build:
      context: ./flink
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        jobmanager.rest.address: jobmanager
        state.backend: filesystem
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        heartbeat.interval: 1000
        heartbeat.timeout: 5000
    volumes:
      - ./flink/sql:/opt/flink/sql
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
      interval: 5s
      timeout: 10s
      retries: 10

  taskmanager:
    build:
      context: ./flink
      dockerfile: Dockerfile
    depends_on:
      jobmanager:
        condition: service_healthy
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 16
        state.backend: filesystem
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        heartbeat.interval: 1000
        heartbeat.timeout: 5000
    volumes:
      - ./flink/sql:/opt/flink/sql

  sql-client:
    build:
      context: ./flink
      dockerfile: Dockerfile
    #command: bin/sql-client.sh
    command: bin/sql-client.sh -f /opt/flink/sql/flink.sql
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        rest.address: jobmanager
    depends_on:
      jobmanager:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./flink/sql:/opt/flink/sql

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - PINOT_HOST=pinot-broker
      - PINOT_PORT=8099
    depends_on:
      pinot-broker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  debug:
    image: nicolaka/netshoot
    container_name: network-debug
    command: sleep infinity
    depends_on:
      kafka:
        condition: service_healthy
      jobmanager:
        condition: service_healthy

networks:
  default:
    name: analytics-network
